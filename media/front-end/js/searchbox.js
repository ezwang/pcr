<<<<<<< HEAD
// Generated by CoffeeScript 1.6.3
=======
// Generated by CoffeeScript 1.6.1

>>>>>>> 3902cf11d8a733272cf5f3e7dd3c7b24b9a941c8
/*
  Logic for the auto-complete search-box, on the home-page and top-right of
  every page.  Uses the jQuery UI autocomplete plugin.
*/


(function() {
  var MAX_ITEMS, REGEXES_BY_PRIORITY, endsWith, find_autocomplete_matches, get_entries;

  MAX_ITEMS = {
    Courses: 6,
    Instructors: 3,
    Departments: 3
  };

  endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length !== -1);
  };

  REGEXES_BY_PRIORITY = {
    Courses: [
      (function(search_term, course) {
        return RegExp("^" + search_term, 'i').test(course.title);
      }), (function(search_term, course) {
        return RegExp("\\s" + search_term, 'i').test(course.keywords);
      }), (function(search_term, course) {
        return RegExp(search_term, 'i').test(course.keywords);
      })
    ],
    Instructors: [
      (function(search_term, instructor) {
        if (endsWith(search_term, " ")) {
          return false;
        } else {
          return RegExp("\\s" + search_term + "[a-z]*$", 'i').test(instructor.keywords);
        }
      }), (function(search_term, instructor) {
        return RegExp("^" + search_term, 'i').test(instructor.keywords);
      }), (function(search_term, instructor) {
        return RegExp("\\s" + search_term, 'i').test(instructor.keywords);
      })
    ],
    Departments: [
      (function(search_term, department) {
        return RegExp("^" + search_term, 'i').test(department.title);
      }), (function(search_term, department) {
        return RegExp("^" + search_term, 'i').test(department.keywords);
      })
    ]
  };

  find_autocomplete_matches = function(search_str, category, cb) {
    return $.ajax('http://api.penncoursereview.com/v1/search', {
      data: {
        result_type: category,
        count: 5,
        q: search_str,
        token: 'smOFfjV6JeHUgGO5e7VdEAYuF3oQGn'
      },
      success: function(data) {
        var dup, i, obj, obj2, results, resultsArr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
        results = JSON.parse(data).result;
        resultsArr = [];
        if (results.courses) {
          _ref = results.courses;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            obj = _ref[i];
            obj.category = "courses";
            dup = false;
            _ref1 = results.departments;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              obj2 = _ref1[i];
              if (obj.value === obj2.value) {
                dup = true;
                break;
              }
            }
            if (!dup) {
              if (!obj.name) {
                obj.name = "";
              }
              resultsArr.push(obj);
            }
          }
        }
        if (results.instructors) {
          _ref2 = results.instructors;
          for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
            obj = _ref2[i];
            obj.category = "instructors";
            if (!obj.name) {
              obj.name = "";
            }
            resultsArr.push(obj);
          }
        }
        if (results.departments) {
          _ref3 = results.departments;
          for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
            obj = _ref3[i];
            obj.title = obj.value;
            obj.category = "departments";
            if (!obj.name) {
              obj.name = "";
            }
            resultsArr.push(obj);
          }
        }
        return cb(resultsArr);
      },
      error: function(error) {
        return cb([]);
      }
    });
  };

  get_entries = function(term, courses, instructors, departments) {
    return find_autocomplete_matches(term, 'Courses', courses).concat(find_autocomplete_matches(term, 'Instructors', instructors)).concat(find_autocomplete_matches(term, 'Departments', departments));
  };

  $.widget("custom.autocomplete", $.ui.autocomplete, {
    _renderMenu: function(ul, items) {
      var current_category,
        _this = this;
      current_category = "";
      return $.each(items, function(index, item) {
        var li;
        if (item.category !== current_category) {
          li = "<li class='ui-autocomplete-category'><p>" + item.category + "</p></li>";
          ul.append(li);
          current_category = item.category;
        }
        return _this._renderItem(ul, item);
      });
    }
  });

  window.init_search_box = function(dir, callback, start) {
    var sort_by_title;
    if (dir == null) {
      dir = "";
    }
    if (callback == null) {
      callback = null;
    }
    sort_by_title = function(first, second) {
      if (first.title > second.title) {
        return 1;
      } else {
        return -1;
      }
    };
<<<<<<< HEAD
    return $("#searchbox").autocomplete({
      delay: 0,
      minLength: 0,
      autoFocus: true,
      source: function(request, response) {
        return find_autocomplete_matches(request.term, 'mixed', function(arr) {
          console.log(arr);
          return response(arr);
        });
      },
      position: {
        my: "left top",
        at: "left bottom",
        collision: "none",
        of: "#searchbar",
        offset: "0 -1"
      },
      focus: function(event, ui) {
        return false;
      },
      select: function(event, ui) {
        window.location = dir + ui.item.url;
        return false;
      },
      open: function(event, ui) {
        return $(".ui-autocomplete.ui-menu.ui-widget").width($("#searchbar").width());
=======
    return $.getJSON(dir + "autocomplete_data.json/" + start.toLowerCase(), function(data) {
      var courses, departments, instructors;
      instructors = data.instructors.sort(sort_by_title);
      courses = data.courses.sort(sort_by_title);
      departments = data.departments.sort(sort_by_title);
      console.log("have data");
      $("#searchbox").autocomplete({
        delay: 0,
        minLength: 2,
        autoFocus: true,
        source: function(request, response) {
          return response(get_entries(request.term, courses, instructors, departments));
        },
        position: {
          my: "left top",
          at: "left bottom",
          collision: "none",
          of: "#searchbar",
          offset: "0 -1"
        },
        focus: function(event, ui) {
          return false;
        },
        select: function(event, ui) {
          window.location = dir + ui.item.url;
          return false;
        },
        open: function(event, ui) {
          return $(".ui-autocomplete.ui-menu.ui-widget").width($("#searchbar").width());
        }
      }).data("autocomplete")._renderItem = function(ul, item) {
        return $("<li></li>").data("item.autocomplete", item).append("<a>\n  <span class='ui-menu-item-title'>" + item.title + "</span><br />\n  <span class='ui-menu-item-desc'>" + item.desc + "</span>\n</a>").appendTo(ul);
      };
      if (callback != null) {
        return callback();
>>>>>>> 3902cf11d8a733272cf5f3e7dd3c7b24b9a941c8
      }
    }).data("autocomplete")._renderItem = function(ul, item) {
      return $("<li></li>").data("item.autocomplete", item).append("<a>\n  <span class='ui-menu-item-title'>" + item.value + "</span><br />\n  <span class='ui-menu-item-desc'>" + item.name + "</span>\n</a>").appendTo(ul);
    };
  };

}).call(this);
